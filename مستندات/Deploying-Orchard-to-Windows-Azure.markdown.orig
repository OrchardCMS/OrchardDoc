<<<<<<< HEAD
> Draft topic Orchard supports several methods of deploying to the Windows Azure environment.

__Methods of deployment to Azure that this document outlines__

* Deploy the Orchard binary to an Azure Website using the Azure Website Gallery (coming soon)
* Deploy the Orchard binary to an Azure Website using FTP (draft)
* Build and deploy the Orchard source code to an Azure Website (coming soon)
* Build and deploy the Orchard source code to an Azure Cloud Service (done)

# Deploy the Orchard binary to an Azure Website using the Azure Website Gallery

> Coming soon.

# Deploy the Orchard binary to an Azure Website using FTP

> Coming soon.

# Build and deploy the Orchard source code to an Azure Website using FTP

[Orchard Source Code Repo]: http://orchard.codeplex.com/sourcecontrol/list/changesets

> Last tested on 31 August 2013 from Windows 8 with Visual Studio 2012 and Orchard 1.7

__Overview__

1. Download the Orchard source to your local machine
2. Create an SQL Server database on your local machine
3. Get Started locally
4. Create an SQL Server instance in Windows Azure
5. Deploy the local database to the Windows Azure SQL Server
6. Create a Website in Windows Azure
7. Compile and deploy your local code to the Windows Azure Website
8. Configure the database connection string

__Requirements__

- Visual Studio
- SQL Server
- SQL Server Management Studio
- Windows Azure account
- FTP Client (e.g. FileZilla)

__Download the Orchard source to your local machine__

- Go to the [Orchard Source Code Repo][]
- Choose the master branch
- Click on the latest change set
- Click download
- Save the file to your hard drive
- Unzip it into C:/OrchardRocks (or wherever)

__Create an SQL Server database on your local machine__

- Open SQL Server Management Studio
- Connect to your local SQL Server engine
- Create a new database called orchardrocks_db (or whatever)

__Get Started locally__

- Open "C:\OrchardRocks\src\Orchard.sln" with Visual Studio
- View the solution explorer (Ctrl + Alt + L)
- Set Orchard.Web as the startup project (Right click > Set as startup project)
- Run without debugging (Ctrl + F5)
- Orchard's Get Started page will show
- Name your site
- Choose a username
- Create a strong password
- Use an existing SQL Server, SQL Express database
- Add the orchardrocks_db connection string

> data source=FONTY;initial catalog=orchardrocks\_db;integrated security=True;MultipleActiveResultSets=True;

- Choose the Default recipe
- Click Finish Setup
- After it completes you will see the default Orchard homepage

__Create an SQL Server instance in Windows Azure__

- Login to the Windows Azure Management portal. 
- Go to SQL DATABASES
- Choose SERVERS
- Click ADD
- Choose a LOGIN NAME, LOGIN PASSWORD, and REGION. 
- Do allow Windows Azure Services to Access the Server.
- Open the server in the management portal once Azure finishes creating it
- Choose CONFIGURE
- Under allowed ip addresses, choose to add the CURRENT CLIENT IP ADDRESS TO THE ALLOWED IP ADDRESSES.
- SAVE

__Deploy the local database to the Windows Azure SQL Server__

- Open SQL Server Management Studio
- Connect to your local SQL Server engine
- Right click orchardrocks_db 
- Choose Deploy database to SQL Azure
- Connect to your Windows Azure SQL Database Server
- Accept the default settings. 
- Click Next
- Click Finish
- The deployment might take two minutes
- When the operation is complete, you can check for the database in the Azure Management portal 

__Create a Website in Windows Azure__

- Login to the Windows Azure Management portal
- Choose New > Compute > Website > Quick Create
- Add a URL and select a region
- Click the giant green tickmark to create the site
- After Azure creates it, open the website in the management portal
- Go to DASHBOARD, and note its FTP host name, FTP USER, and FTP password
- Do not use the FTPS host name unless you want to setup a certificate
> TODO Explain how to setup and to find the Website's FTP password

__Compile and deploy your local code to the Windows Azure Website__

- Open a Visual Studio Developer Command Prompt
- Change the directory to the Orchard root folder with cd "C:\OrchardRocks"
- Run build Precompiled
- Compilation will take about two minutes.
- The result is a C:\OrchardRocks\build\Precompiled directory
- Open FileZilla or another FTP client
- Connect to the Azure Website using the its FTP host name, FTP USER, and FTP password
- Upload the contents of C:\OrchardRocks\build\Precompiled\ to /site/wwwroot
- The upload will contain about 1650 files and 45 MB

> Tip: If you are receiving a bunch of failed FTP transfers, make sure that you are using FTP not FTPS

- Once the upload is complete, __DO NOT NAVIGATE TO THE WEBSITE YET__, instead...
- Copy the contents of C:\OrchardRocks\src\Orchard.Web\App_Data\ to /site/wwwroot/AppData
- This upload will contain about 20 files and 5 MB

> Tip: If you navigate to the website now, you will see "The resource cannot be found." error, 
> because Orchard is trying to connect to your local database. You will need to configure the database
> connection string AND restart the website (e.g. by doing a trivial modification to the root web.config file).

__Configure the database connection string__

- With your FTP client still open, open the /site/wwwroot/App_Data/Sites/Default/Settings.txt file
- Change the DataConnectionString from the local database to the remote one, e.g.

> Server=tcp:w6jnz09d9i.database.windows.net,1433;Database=orchardrocks\_db;User ID=bigfont@w6jnz09d9i;Password=abc123!@#;Trusted\_Connection=False;Encrypt=True;Connection Timeout=30;

- Now you can navigate to the website at orchardrocks.azurewebsites.net (or whatever you named it)
- If all went as planned, you should see the Orchard homepage *not* the Orchard start page

# Build and deploy the Orchard source code to an Azure Cloud Service
=======
Orchard can be deployed to both Windows Azure Cloud Services and Windows Azure Web Sites. Orchard also ships with a number of integration features that takes advantage of Windows Azure services such as blob storage and caching, and that can be configured before deployment if needed. This topic walks you through the process of deploying Orchard to Windows Azure.

> NOTE: The Windows Azure deployment process in Orchard has undergone a complete overhaul for version 1.7.1. For more information about what's changed see the [What's new for Windows Azure in Orchard 1.7.1](Whats-new-for-Windows-Azure-in-Orchard-1-7-1) topic.

# Prerequisites

Before you can deploy Orchard to Windows Azure you need the following:

* Visual Studio 2012
* Windows Azure SDK 2.1 for Visual Studio 2012
* The Orchard source code
* An active Windows Azure subscription

# Deploying Orchard to a Windows Azure Cloud Service

If you only plan to run a single role instance, deploying is extremely simple. Starting with version 1.7.1 of Orchard, deployment can be performed using the Windows Azure tooling in Visual Studio.

Start by opening the `Orchard.Azure.sln` solution in Visual Studio.

The only thing you have to configure before starting the deployment process is the storage account to use for shell settings. To do this, in *Solution Explorer*, navigate to `Orchard.Azure.CloudService` project, double click the `Orchard.Azure.Web` role and navigate to the *Settings* tab. Configure the connection string of the storage account you want to use:
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

![](../Attachments/Deploying-Orchard-to-Windows-Azure/settings-connection-string.png)

Now to deploy the cloud service, right click the `Orchard.Azure.CloudService` project in *Solution Explorer* and select *Publish*, and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory:

<<<<<<< HEAD
> Last tested on 30 August 2013 from Windows 8 with Visual Studio 2012, Azure SDK 2.0 and Orchard 1.7
=======
![](../Attachments/Deploying-Orchard-to-Windows-Azure/publish.png)

Once deployment has successfully completed, browse to the newly deployed Orchard site and go through setup.

Congratulations! Orchard is now fully configured for a single role instance on Windows Azure.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

## Using multiple role instances

<<<<<<< HEAD
__Overview__
=======
Let's take it up a notch. You may want to scale out your cloud service to run on more than one role instance, either because you want to support a higher workload, or because the site is mission critical and you need some fault tolerance (using only a single instance of any one role in a Windows Azure Cloud Service voids the Windows Azure SLA).
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

Using multiple instances (also known as a *web farm* or a *server farm*) with Orchard requires some extra consideration.

<<<<<<< HEAD
__Requirements__
=======
In the most basic default configuration of Orchard, multiple instances can cause problems: 
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

1. Orchard uses a local file-based SQL Server CE database. Obviously this won't work as each instance will have its own separate database.
2. Orchard media files are stored in the local file system. This won't work as the file systems or the different instances will soon start to diverge as users add/remove media.
3. Orchard output caching and database caching (NHibernate second-level cache) use local memory for storage. This won't work as content might be updated on one instance and any cached copies invalidated there, while other instances continue unaware of this change.
4. Session state is stored in local memory. This won't work because the cloud service load balancer has no session affinity so users will lose their state when moving between instances.

<<<<<<< HEAD
__See Also__
=======
Luckily, Orchard has features to overcome each of these complications, but you must configure and enable them.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

### Preparing for multiple instances

<<<<<<< HEAD
__Download the Orchard source__
=======
**Problem #1** means we need to store the data in a shared database. To do this you need to create a Windows Azure SQL database that will be used to store Orchard data. You will configure Orchard to use this database later during setup.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

Next, configure the number of instances you want to use in the cloud service project. In *Solution Explorer*, navigate to `Orchard.Azure.CloudService` project, double click the `Orchard.Azure.Web` role and navigate to the *Configuration* tab. Change the *Instance count* value from `1` to some higher number:

<<<<<<< HEAD
__Install the appropriate Windows Azure SDK version__
=======
![](../Attachments/Deploying-Orchard-to-Windows-Azure/configure-instances.png)
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

> NOTE: You can also leave the instance count at `1` and change it after deployment through the Windows Azure management portal.

**Problem #2** we will deal with by enable the *Windows Azure Media Storage* feature later. To prepare for this, configure the storage accounts to use for shell settings and media storage. To do this, navigate to the *Settings* tab. Change the following settings to the storage account connection strings you want to use. You can use the same storage account for both, or any combination of different storage accounts:

![](../Attachments/Deploying-Orchard-to-Windows-Azure/configure-connection-strings.png)

<<<<<<< HEAD
*Aside: Why is this necessary?*
=======
**Problem #3** we will address by enabling the *Windows Azure Output Cache* and *Windows Azure Database Cache* features. These don't need any preparation, as the cloud service project is already preconfigured for co-located role-based caching with the appropriate named caches configured.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

**Problem #4** is already taken care of for us. The cloud service is preconfigured to use the ASP.NET session state provider for Windows Azure Cache. This takes effect immediately after we deploy.

This section above describes only the most basic configuration steps and options. More detailed steps for enabling the *Windows Azure Media Storage*, *Windows Azure Output Cache* and *Windows Azure Database Cache* features for a Windows Azure Cloud Service, as well as more advanced configuration options, are described the following topics:

* [Using Windows Azure Blob Storage](Using-Windows-Azure-Blob-Storage)
* [Using Windows Azure Cache](Using-Windows-Azure-Cache)

<<<<<<< HEAD
__BugFix: Update the csproj references to the correct SDK version__
=======
### Deploying
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

After these few steps of preparation, you are now ready to deploy the cloud service. Right click the `Orchard.Azure.CloudService` project in *Solution Explorer* and select *Publish*, and follow the instructions in the publishing wizard to select subscription, cloud service, storage account and other publishing options. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.

Once deployment has successfully completed, browse to the deployed Orchard site and go through setup. Specify the connection string to the Windows Azure SQL Database you created earlier:

![](../Attachments/Deploying-Orchard-to-Windows-Azure/setup-sql-azure.png)

Once setup has finished, navigate to the admin dashboard of the site and enable the following three features:

* Windows Azure Media Storage
* Windows Azure Output Cache
* Windows Azure Database Cache

Congratulations! Orchard is now fully configured for multiple role instances on Windows Azure. You can now scale out to as many role instances as you need and things will be handled.

> NOTE: If you set the instance count to more than `1` before deploying, you must now restart all role instances once to make sure they pick up the new configuration.

# Deploying Orchard to a Windows Azure Web Site

<<<<<<< HEAD
__Build an Azure cloud service package (.cspkg)__
=======
Deploying to a Windows Azure Web Site is also done using the Windows Azure tooling in Visual Studio. However, instead of using the `Orchard.Azure.sln` as described for Windows Azure Cloud Services above, for a Windows Azure Web Site we use the normal `Orchard.sln` solution and publish the normal `Orchard.Web` project.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

As with a cloud service, if you only plan to run a single instance, deploying is extremely simple.

<<<<<<< HEAD
__Create an Azure Storage account__
=======
Start by opening the `Orchard.sln` solution in Visual Studio.
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

To deploy the web site, right click the `Orchard.Web` project in *Solution Explorer* and select *Publish*, and follow the instructions in the publishing wizard. Click the *Import* button to import a web deploy publishing configuration from your Windows Azure subscriptions. How to use the Windows Azure publishing tools in Visual Studio is beyond the scope of this topic, but they are pretty self-explanatory.

Once deployment has successfully completed, browse to the newly deployed Orchard site and go through setup.

Congratulations! Orchard is now fully configured for a single instance Windows Azure Web Site.

<<<<<<< HEAD
__Update the cloud service configuration file (.cscfg)__
=======
## Using multiple instances
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6

As with cloud services, you need to do a little more configuration if you plan to scale out your web site to more than one instance.

The steps for using Windows Azure SQL Database as the database are the same as for a cloud service (create a Windows Azure SQL database beforehand and specify its connection string during setup).

The steps for enabling the *Windows Azure Media Storage*, *Windows Azure Output Cache* and *Windows Azure Database Cache* features for a Windows Azure Web Site are described the following topics:

<<<<<<< HEAD
__Optional: Create a new SQL Azure database for Orchard__

* This isn't strictly necessary. 
* For the sake of simplicity in this tutorial, use the built-in SQL Server CE for now.

__Create a Azure Cloud Service__

* Login to the Windows Azure management portal. 
* Click New > Computer > Cloud Service > Quick Create
* Name your service orchardrocks (or whatever) and then click Create Cloud Service

__Deploy to the Azure cloud service__

* Login to the Windows Azure management portal
* Open your cloud service
* In the quickstart area, choose "New production deployment."

![][NewCloudServiceDeployment]

* Name the deployement anything (e.g. OrchardRocks_v1)
* Browse for the Package: "C:\OrchardRocks\buildazure\Stage\Orchard.Azure.Web.cspkg"
* Browse for the Configuration: "C:\OrchardRocks\buildazure\Stage\ServiceConfiguration.cscfg"
* Choose "Deploy even if one or more roles contain a single instance."
* Choose "Start deployment."
* Deploy!

![][UploadAPackage]

* Deployment should take about 10 to 15 minutes. Have some water :-)
* Go the the cloud service's Dashbaord to view the deployment progress. 
* Once complete, browse to orchardrocks.cloudapp.net (or whereever)

__Some Warnings and Errors that Might Occur__

*ClickToBuildAzurePackage: ...cannot be imported again*

Why: Unknown.
Fix: Unknown.

> Build succeeded.

> C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v11.0\Windows Azure Tools\2.0\Microsoft.Win
> dowsAzure.targets(119,3): warning MSB4011: "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft
> .Common.targets" cannot be imported again. It was already imported at "C:\Program Files (x86)\MSBui
> ld\Microsoft\VisualStudio\v10.0\Windows Azure Tools\2.0\Microsoft.WindowsAzure.targets (117,3)". Th
> is is most likely a build authoring error. This subsequent import will be ignored. 
> [C:\OrchardRocks\AzurePackage.proj]

*ClickToBuildAzurePackage: Found conflicts between different versions of the same dependent assembly.*

Why: Our project is targetting different versions of the same assemblies.
Fix: Run AsmSpy.exe, then update conflicting dependency references to consistent versions.

> Build succeeded.

> "C:\OrchardRocks\AzurePackage.proj" (Build target) (1) ->
> "C:\OrchardRocks\src\Orchard.Azure\Orchard.Azure.sln" (Build target) (2:2) ->
> "C:\OrchardRocks\src\Orchard.Azure\Orchard.Azure.CloudService\Orchard.Azure.CloudService.ccproj" (default target) (65:2) ->
> "C:\OrchardRocks\src\Orchard.Azure\Orchard.Azure.Web\Orchard.Azure.Web.csproj" (default target) (64:3) ->
> (ResolveAssemblyReferences target) ->
> C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Common.targets(1605,5): warning MSB3247:
> Found conflicts between different versions of the same dependent assembly. 
> [C:\OrchardRocks\src\Orchard.Azure\Orchard.Azure.Web\Orchard.Azure.Web.csproj]

> "C:\OrchardRocks\AzurePackage.proj" (Build target) (1) ->
> "C:\OrchardRocks\src\Orchard.Azure.Tests\Orchard.Azure.Tests.sln" (Build target) (67) ->
> "C:\OrchardRocks\src\Orchard.Azure.Tests\Orchard.Azure.Tests.csproj" (default target) (68) ->
>  C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Common.targets(1605,5): warning MSB3247:
> Found conflicts between different versions of the same dependent assembly. 
> [C:\OrchardRocks\src\Orchard.Azure.Tests\Orchard.Azure.Tests.csproj]

*ClickToBuildAzurePackage: ...was not found*

Why: We have an earlier or later version of the Windows Azure SDK installed.
Fix: Ensure that Windows Azure SDK 2.0 is the only version of the SDK installed.

> C:\OrchardRocks\src\Orchard.Azure\Orchard.Azure.CloudService\Orchard.Azure.Cl
> oudService.ccproj(59,3): error MSB4019: The imported project "C:\Program Files (x86)\MSBuild\Micros
> oft\VisualStudio\v11.0\Windows Azure Tools\2.0\Microsoft.WindowsAzure.targets" was not found. Confi
> rm that the path in the <Import> declaration is correct, and that the file exists on disk.
	
*After Deployment: Could not load file or assembly...*

Why: Our Microsoft.WindowsAzure.* references are an earlier version, which is resolving to 2.1.0.0
Fix: Update the references to version 2.0

> Could not load file or assembly 'Microsoft.WindowsAzure.ServiceRuntime, Version=2.1.0.0, 
> Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. 
> The system cannot find the file specified.

*After Deployment: Could not load file or assembly...*

Why: We deleted the assembly accidentally.
Fix: Add the missing assembly to the Orchard.Azure.Web project. 

> Could not load file or assembly 'Microsoft.Web.Infrastructure, Version=1.0.0.0, Culture=neutral, 
> PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
=======
* [Using Windows Azure Blob Storage](Using-Windows-Azure-Blob-Storage)
* [Using Windows Azure Cache](Using-Windows-Azure-Cache)
>>>>>>> 2e92553b346834209cd2ddb8f548904766f015b6
